# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E-CLUB59-31-TC02: Verify Contact Us button opens the Contact Us modal @smoke
- Location: /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:47:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: "h2[class*=\"typography-heading\"]:has-text(\"Need help\")"
Received: "contactUsModalAssert"
    at ClubSurveyLogin.verifyContactUsModal (/Users/nehachadha/59club_playwright/playwright-automation-framework/src/pages/ClubSurveyLogin.ts:97:42)
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:64:13
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:63:9
```

# Page snapshot

```yaml
- alert
- link "logo":
  - img "logo"
- region:
  - group:
    - img "Enhance Service & Sales Excellence"
  - group:
    - img "Unlock Powerful Insights"
  - group:
    - img "Train & Excel with Expert Guidance"
- heading "Enhance Service & Sales Excellence" [level=3]
- paragraph: 59Club is the industry leading customer service analyst and training provider, operating across the UK, Ireland, Europe, USA, Canada, Middle East, Africa, Asia, Australia & New Zealand.
- button "Go to slide 1"
- button "Go to slide 2"
- button "Go to slide 3"
- button "Contact us"
- img
- heading "Login" [level=1]
- paragraph: Please enter your details
- text: Email address*
- textbox "Insert your email address"
- text: Password*
- button "Forgot your password?"
- textbox "Enter your password"
- button:
  - img
- checkbox "Remember me"
- text: Remember me
- button "Login" [disabled]
```

# Test source

```ts
   1 | //import { Page } from "@playwright/test";
   2 | import { BrowserContext, Page } from "playwright";
   3 | import { PlaywrightWrapper } from "../../helpers/playwright";
   4 | import { credentials } from "../../constants/credentials";
   5 | import { expect } from "playwright/test";
   6 | import { URLConstants } from "../../constants/urlConstants";
   7 |
   8 | export class ClubSurveyLogin extends PlaywrightWrapper {
   9 |
   10 |     constructor( page: Page, context: BrowserContext) {
   11 |         super( page, context);
   12 |     }
   13 |     public selectors = {
   14 |         emailSelector: 'input[placeholder="Insert your email address"]',
   15 |         secondaryEmailSelector: 'input[name="email"]',
   16 |         passwordSelector: 'input[placeholder="Enter your password"]',
   17 |         secondaryPasswordSelector: 'input[name="password"]',
   18 |         loginButtonSelector: 'button[name="Login"]',
   19 |         clublogo: 'img[alt="logo"][src*="clubLogo"]',
   20 |         contactus: 'button[class*="inline-flex"][class*="bg-lime"][class*="typography-body-1-bold"]',
   21 |        // contactus: 'button[contains(text(), "Contact us") and contains(@class, "inline-flex") and contains(@class, "bg-lime")]',
   22 |         imgscroller1: 'img[@alt="Unlock Powerful Insights" and contains(@src, "loginsecond") and contains(@class, "object-contain")]',
   23 |         imgscroller2: 'img alt="Unlock Powerful Insights" loading="lazy" width="450" height="300" decoding="async" data-nimg="1" class="object-contain" src="/_next/static/media/loginsecond.b5f50a21.svg" style="color: transparent"',
   24 |         imgscroller3: 'img[@alt="Train & Excel with Expert Guidance" and contains(@src, "loginthird") and contains(@class, "object-contain")]',
   25 |         loginButton: 'button[contains(text(), "Login") and contains(@class, "inline-flex") and contains(@class, "bg-dark-green")]',
   26 |         rememberme: 'div[contains(@class, "relative") and contains(@class, "flex") and contains(@class, "h-5") and contains(@class, "w-5")]/input[@type="checkbox"]',
   27 |         remembermeLabel: 'div[contains(@class, "relative") and contains(@class, "flex") and contains(@class, "h-5") and contains(@class, "w-5")]/input[@type="checkbox"]',
   28 |         togglebutton: 'button[contains(@class, "text-gray-1000") and contains(@class, "flex") and contains(@class, "cursor-pointer") and contains(@class, "px-3")]',
   29 |         clublogodashboard: 'img alt="Large Logo" width="51" height="18" decoding="async" data-nimg="1" class="h-[17px] w-[48px]" src="/_next/static/media/largeLogo.087c4efb.svg" style="color: transparent"',
   30 |         contactUsModal: 'div[role="dialog"][data-state="open"]',
   31 |         contactUsModalAssert:'h2[class*="typography-heading"]:has-text("Need help")',
   32 |         contactUsModalCloseButton:'div[class*="cursor-pointer"][class*="bg-greyscale-100"',
   33 |     };
   34 |
   35 |     public someAbstractMethod(): void {
   36 |         console.log("Abstract method implemented in ClubSurveyLogin");
   37 |     }
   38 |
   39 |
   40 |     public async ClubSurveyLogin(role: keyof typeof credentials) {
   41 |
   42 |         const { username, password } = credentials[role];
   43 |
   44 |         await this.loadApp(URLConstants.adminURL)
   45 |         const pageTitle = await this.page.title();
   46 |         if (pageTitle.startsWith("59club")) {
   47 |             await this.type(this.selectors.emailSelector, "Username", username);
   48 |             await this.type(this.selectors.passwordSelector, "password", password);
   49 |             await this.click(this.selectors.loginButtonSelector, "Sign In", "Button");
   50 |             await this.wait('mediumWait')
   51 |          //   await this.storeState("./logins/salesforceLogin.json")
   52 |             await this.validateElementVisibility(this.selectors.clublogodashboard, "clubLargeLogo");
   53 |         } else {
   54 |             console.log("Login page is Skipped");
   55 |
   56 |         }
   57 | }
   58 |
   59 | public async verifyLogoRedirection(expectedURL: string) {
   60 |     // Ensure the 59club logo is visible
   61 |     await this.validateElementVisibility(this.selectors.clublogo, "logo");
   62 |
   63 |     // Listen for the new tab to open
   64 |     const [newPage] = await Promise.all([
   65 |         this.context.waitForEvent('page'), // Wait for a new page (tab) to open
   66 |         this.click(this.selectors.clublogo, "59club Logo", "img"), // Click the logo
   67 |     ]);
   68 |
   69 |     // Wait for the new page to load
   70 |     await newPage.waitForLoadState('domcontentloaded');
   71 |
   72 |     // Get the URL of the new page
   73 |     const currentURL = await newPage.url();
   74 |     console.log("Navigated to URL:", currentURL);
   75 |
   76 |     // Assert that the URL matches the expected URL
   77 |     expect(currentURL).toBe(expectedURL);
   78 |
   79 |     // Ensure the new page is not closed prematurely
   80 |     await newPage.close(); // Close the new tab after verification (optional)
   81 | }
   82 |
   83 | public async verifyContactUsModal(expectedTextSubstring: string) {
   84 |     //Ensure the contact us button is visible
   85 |     await this.validateElementVisibility(this.selectors.contactus, "Contact Us");
   86 |
   87 |
   88 |     // click contactus button
   89 |     this.click(this.selectors.contactus, "Contact Us Button", "Button"), // Click the button
   90 |     
   91 |     //Ensure contactus modal appears
   92 |     this.validateElementVisibility(this.selectors.contactUsModal, "Contact Us Modal");
   93 |     // Wait for the modal to be visible 
   94 |    // const modal = this.page.locator('contactUsModal');
   95 |
   96 |     // Assert that the URL matches the expected URL
>  97 |     await expect('contactUsModalAssert').toBe(expectedTextSubstring);
      |                                          ^ Error: expect(received).toBe(expected) // Object.is equality
   98 |
   99 |     // Ensure the new page is not closed prematurely
  100 |     await this.click(this.selectors.contactUsModalCloseButton, "Close Button", "button"); // Close the new tab after verification (optional)
  101 | }}
```