# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E-CLUB59-LOGIN: Complete end-to-end flow @e2e
- Location: /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Regression_Suite/LandOnSurveyPlatform.test.ts:118:5

# Error details

```
Error: expect.toBeVisible: Unsupported token "@class" while parsing css selector "button[contains(text(), "Login") and contains(@class, "inline-flex") and contains(@class, "bg-dark-green")]". Did you mean to CSS.escape it?
Call log:
  - expect.toBeVisible with timeout 20000ms
  - waiting for button[contains(text(), "Login") and contains(@class, "inline-flex") and contains(@class, "bg-dark-green")]

    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Regression_Suite/LandOnSurveyPlatform.test.ts:175:31
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Regression_Suite/LandOnSurveyPlatform.test.ts:163:3
```

# Page snapshot

```yaml
- dialog "Need help or want to contact us?":
  - button
  - img "Need help or want to contact us?"
  - heading "Need help or want to contact us?" [level=2]
  - img
  - paragraph: Need help or want to contact us?
  - heading "Need help or want to contact us?" [level=2]
  - paragraph: Your identity will be shared with the venue in order to respond to your query, however your survey responses will remain in keeping with your chosen anonymity selection.
  - text: First name*
  - textbox "Your first name"
  - text: Last name*
  - textbox "Your last name"
  - text: Email address*
  - textbox "Enter your email address"
  - text: Message
  - textbox "Message"
  - button "Submit" [disabled]
```

# Test source

```ts
   75 | test('SANITY-CLUB59-LOGIN-TC03:Validate login form is accessible--@sanity', async ({ page }) => {
   76 |     // Add test metadata
   77 |     test.info().annotations.push(
   78 |         { type: 'TestCase', description: 'SANITY-CLUB59-LOGIN-TC03' },
   79 |         { type: 'Test Description', description: 'Validate login form is accessible' }
   80 |     );
   81 |     // Step 1: Open the login screen
   82 |     await test.step("Navigate to the login screen", async () => {
   83 |         await clubSurveyLogin.loadApp(URLConstants.adminURL);
   84 |         // Assert that the login screen is loaded
   85 |         const pageTitle = await page.title();
   86 |         expect(pageTitle).toContain("59club"); 
   87 |     });
   88 |
   89 |     // Step 2: Verify the username, password and Login button is accessible
   90 |     await test.step("Verify login form elements are accessible", async () => {
   91 |         const usernameField = page.locator(clubSurveyLogin.selectors.emailSelector);
   92 |         const passwordField = page.locator(clubSurveyLogin.selectors.passwordSelector);
   93 |         const loginButton = page.locator(clubSurveyLogin.selectors.loginButtonSelector);
   94 |
   95 |         // Assert that the username field is visible
   96 |         await expect(usernameField).toBeVisible();
   97 |
   98 |         // Assert that the password field is visible
   99 |         await expect(passwordField).toBeVisible();
  100 |
  101 |         // Assert that the login button is visible
  102 |         await expect(loginButton).toBeVisible();
  103 |     });
  104 |     // Step 3: Verify the "Remember Me" checkbox is accessible
  105 |     await test.step("Verify 'Remember Me' checkbox is accessible", async () => {
  106 |         const rememberMeCheckbox = page.locator(clubSurveyLogin.selectors.rememberme);
  107 |         await expect(rememberMeCheckbox).toBeVisible();
  108 |     }
  109 |     );
  110 |     // Step 4: Verify the "Forgot Password" link is accessible
  111 |     await test.step("Verify 'Forgot Password' link is accessible", async () => {
  112 |         const forgotPasswordLink = page.locator(clubSurveyLogin.selectors.forgotpassword);
  113 |         await expect(forgotPasswordLink).toBeVisible();
  114 |     });
  115 | });
  116 |
  117 |
  118 | test('E2E-CLUB59-LOGIN: Complete end-to-end flow @e2e', async ({ page }) => {
  119 |   // Add test metadata
  120 |   test.info().annotations.push(
  121 |     { type: "TestCase", description: "E2E-CLUB59-LOGIN" },
  122 |     { type: "Test Description", description: "End-to-end flow: Load page, navigate via logo and Contact Us, and verify login fields visibility" }
  123 |   );
  124 |
  125 |   // Step 1: Load the login screen
  126 |   await test.step("Navigate to the login screen", async () => {
  127 |     await clubSurveyLogin.loadApp(URLConstants.adminURL);
  128 |
  129 |     // Assert that the login screen is loaded
  130 |     const pageTitle = await page.title();
  131 |     expect(pageTitle).toContain("59club");
  132 |   });
  133 |
  134 |   // Step 2: Navigate to the homepage via the 59club logo
  135 |   await test.step("Verify redirection to the homepage via the 59club logo", async () => {
  136 |     await clubSurveyLogin.verifyLogoRedirection(URLConstants.clubURL);
  137 |
  138 |     // Assert that the current URL matches the expected homepage URL
  139 |     //const currentURL = await page.url();
  140 |     //expect(currentURL).toBe(URLConstants.clubURL);
  141 |
  142 |     // Assert that the homepage contains a specific element (e.g., a header or logo)
  143 |     const homepageLogo = page.locator(clubSurveyLogin.selectors.clublogo);
  144 |     await expect(homepageLogo).toBeVisible();
  145 |   });
  146 |
  147 |   // Step 3: Verify the "Contact Us" modal is visible
  148 |   await test.step("Verify Contact Us modal via the Contact Us button", async () => {
  149 |     // Click on the "Contact Us" button
  150 |     const contactUsButton = page.locator(clubSurveyLogin.selectors.contactus);
  151 |     await contactUsButton.click();
  152 |
  153 |     // Assert that the "Contact Us" modal is visible
  154 |     const contactUsModal = page.locator(clubSurveyLogin.selectors.contactUsModal);
  155 |     await expect(contactUsModal).toBeVisible();
  156 |
  157 |     // Assert that the modal contains the expected heading
  158 |     const modalHeading = page.locator(clubSurveyLogin.selectors.contactUsModalAssert);
  159 |     await expect(modalHeading).toContainText("Need help");
  160 |   });
  161 |
  162 |   // Step 4: Verify login form elements are accessible
  163 |   await test.step("Verify login form elements are accessible", async () => {
  164 |     const usernameField = page.locator(clubSurveyLogin.selectors.emailSelector);
  165 |     const passwordField = page.locator(clubSurveyLogin.selectors.passwordSelector);
  166 |     const loginButton = page.locator(clubSurveyLogin.selectors.loginButton);
  167 |
  168 |     // Assert that the username field is visible
  169 |     await expect(usernameField).toBeVisible();
  170 |
  171 |     // Assert that the password field is visible
  172 |     await expect(passwordField).toBeVisible();
  173 |
  174 |     // Assert that the login button is visible
> 175 |     await expect(loginButton).toBeVisible();
      |                               ^ Error: expect.toBeVisible: Unsupported token "@class" while parsing css selector "button[contains(text(), "Login") and contains(@class, "inline-flex") and contains(@class, "bg-dark-green")]". Did you mean to CSS.escape it?
  176 |   });
  177 |
  178 |   // Step 5: Verify the "Remember Me" checkbox is accessible
  179 |   await test.step("Verify 'Remember Me' checkbox is accessible", async () => {
  180 |     const rememberMeCheckbox = page.locator(clubSurveyLogin.selectors.rememberme);
  181 |     await expect(rememberMeCheckbox).toBeVisible();
  182 |   });
  183 |
  184 |   // Step 6: Verify the "Forgot Password" link is accessible
  185 |   await test.step("Verify 'Forgot Password' link is accessible", async () => {
  186 |     const forgotPasswordLink = page.locator(clubSurveyLogin.selectors.forgotpassword);
  187 |     await expect(forgotPasswordLink).toBeVisible();
  188 |   });
  189 | });    
  190 |
```