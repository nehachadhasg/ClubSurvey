# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E-CLUB59-31-TC02: Verify Contact Us button opens the Contact Us modal @smoke
- Location: /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:47:9

# Error details

```
Error: Timed out 20000ms waiting for expect(locator).toContainText(expected)

Locator: locator('h2[class*="typography-heading"]:has-text("Need help")')
Expected string: "Need kelp"
Received string: "Need help or want to contact us?"
Call log:
  - expect.toContainText with timeout 20000ms
  - waiting for locator('h2[class*="typography-heading"]:has-text("Need help")')
    21 Ã— locator resolved to <h2 class="typography-heading-2">Need help or want to contact us?</h2>
       - unexpected value "Need help or want to contact us?"

    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:68:84
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:63:9
```

# Page snapshot

```yaml
- dialog "Need help or want to contact us?":
  - button
  - img "Need help or want to contact us?"
  - heading "Need help or want to contact us?" [level=2]
  - img
  - paragraph: Need help or want to contact us?
  - heading "Need help or want to contact us?" [level=2]
  - paragraph: Your identity will be shared with the venue in order to respond to your query, however your survey responses will remain in keeping with your chosen anonymity selection.
  - text: First name*
  - textbox "Your first name"
  - text: Last name*
  - textbox "Your last name"
  - text: Email address*
  - textbox "Enter your email address"
  - text: Message
  - textbox "Message"
  - button "Submit" [disabled]
```

# Test source

```ts
   1 | import { test, expect } from "@playwright/test";
   2 | import { ClubSurveyLogin } from "../../pages/ClubSurveyLogin";
   3 | import { URLConstants } from "../../../constants/urlConstants";
   4 |
   5 | let clubSurveyLogin: ClubSurveyLogin; // Declare the object at the top
   6 |
   7 | test.beforeEach(async ({ page, context }) => {
   8 |   // Initialize the ClubSurveyLogin object before each test
   9 |   clubSurveyLogin = new ClubSurveyLogin(page, context);
  10 | });
  11 |
  12 | test('E2E-CLUB59-31-TC01: Navigate to Surveys Platform via 59club Logo @smoke',  async ({ page, context }) => {
  13 |         // Add test metadata
  14 |         test.info().annotations.push(
  15 |           
  16 |             { type: "TestCase", description: "E2E-CLUB59-31-TC01" },
  17 |             { type: "Test Description", description: "Verify clicking the 59club logo redirects to the homepage" }
  18 |         );
  19 |
  20 |         // Initialize the ClubSurveyLogin page object
  21 |        // const clubSurveyLogin = new ClubSurveyLogin(page, context);
  22 |
  23 |         // Step 1: Open the login screen
  24 |         await test.step("Navigate to the login screen", async () => {
  25 |             await clubSurveyLogin.loadApp(URLConstants.adminURL);
  26 |
  27 |             // Assert that the login screen is loaded
  28 |             const pageTitle = await page.title();
  29 |             expect(pageTitle).toContain("59club"); // Replace "59club" with the actual title of the login page
  30 |         });
  31 |
  32 |         // Step 2: Verify redirection to the homepage via the 59club logo
  33 |         await test.step("Verify redirection to the homepage via the 59club logo", async () => {
  34 |             await clubSurveyLogin.verifyLogoRedirection(URLConstants.clubURL);
  35 |
  36 |             // Assert that the current URL matches the expected homepage URL
  37 |             const currentURL = await page.url();
  38 |           //  expect(currentURL).toBe(URLConstants.clubURL);
  39 |
  40 |             // Assert that the homepage contains a specific element (e.g., a header or logo)
  41 |             const homepageLogo = page.locator(clubSurveyLogin.selectors.clublogo);
  42 |             await expect(homepageLogo).toBeVisible();
  43 |         });
  44 |     });
  45 |
  46 |
  47 |     test('E2E-CLUB59-31-TC02: Verify Contact Us button opens the Contact Us modal @smoke', async ({ page }) => {
  48 |         // Add test metadata
  49 |         test.info().annotations.push(
  50 |             { type: "TestCase", description: "E2E-CLUB59-31-TC02" },
  51 |             { type: "Test Description", description: "Verify clicking the Contact Us button opens the Contact Us modal" }
  52 |         );
  53 |         // Step 1: Open the login screen
  54 |         await test.step("Navigate to the login screen", async () => {
  55 |             await clubSurveyLogin.loadApp(URLConstants.adminURL);
  56 |             // Assert that the login screen is loaded
  57 |             const pageTitle = await page.title();
  58 |             expect(pageTitle).toContain("59club"); // Replace "59club" with the actual title of the login page
  59 |         });
  60 |        
  61 |         // Step 2: verify Contact us modal is visible by clicking on contact us button.
  62 |         //let contactUsModalAssertText = "Need help or want to contact us?";
  63 |         await test.step("Verify contactus modal via the contact us button", async () => {
  64 |             await clubSurveyLogin.verifyContactUsModal(clubSurveyLogin.selectors.contactUsModalAssert.toString());
  65 |
  66 |         // Step 2: Assert that the "Contact Us" modal is visible
  67 |         const contactUsModal = page.locator(clubSurveyLogin.selectors.contactUsModal); // Locator for the modal heading
> 68 |         await expect(page.locator(clubSurveyLogin.selectors.contactUsModalAssert)).toContainText("Need kelp"); // Assert that the modal is visible
     |                                                                                    ^ Error: Timed out 20000ms waiting for expect(locator).toContainText(expected)
  69 |       });
  70 |     });
```