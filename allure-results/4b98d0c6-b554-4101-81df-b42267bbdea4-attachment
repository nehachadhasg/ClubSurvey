# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E-CLUB59-31-TC01: Navigate to Surveys Platform via 59club Logo >> Verify clicking the 59club logo redirects to the homepage
- Location: /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:6:9

# Error details

```
Error: expect(received).toBe(expected) // Object.is equality

Expected: "https://www.59club.com/"
Received: "https://qa.survey.59club.studiographene.xyz/en-US/auth/login"
    at ClubSurveyLogin.verifyLogoRedirection (/Users/nehachadha/59club_playwright/playwright-automation-framework/src/pages/ClubSurveyLogin.ts:65:24)
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:28:13
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:27:9
```

# Page snapshot

```yaml
- alert
- link "logo":
  - img "logo"
- region:
  - group:
    - img "Enhance Service & Sales Excellence"
  - group:
    - img "Unlock Powerful Insights"
  - group:
    - img "Train & Excel with Expert Guidance"
- heading "Enhance Service & Sales Excellence" [level=3]
- paragraph: 59Club is the industry leading customer service analyst and training provider, operating across the UK, Ireland, Europe, USA, Canada, Middle East, Africa, Asia, Australia & New Zealand.
- button "Go to slide 1"
- button "Go to slide 2"
- button "Go to slide 3"
- button "Contact us"
- img
- heading "Login" [level=1]
- paragraph: Please enter your details
- text: Email address*
- textbox "Insert your email address"
- text: Password*
- button "Forgot your password?"
- textbox "Enter your password"
- button:
  - img
- checkbox "Remember me"
- text: Remember me
- button "Login" [disabled]
```

# Test source

```ts
   1 | //import { Page } from "@playwright/test";
   2 | import { BrowserContext, Page } from "playwright";
   3 | import { PlaywrightWrapper } from "../../helpers/playwright";
   4 | import { credentials } from "../../constants/credentials";
   5 | import { expect } from "playwright/test";
   6 | import { URLConstants } from "../../constants/urlConstants";
   7 |
   8 | export class ClubSurveyLogin extends PlaywrightWrapper {
   9 |
  10 |     constructor( page: Page, context: BrowserContext) {
  11 |         super( page, context);
  12 |     }
  13 |     public selectors = {
  14 |         emailSelector: 'input[placeholder="Insert your email address"]',
  15 |         secondaryEmailSelector: 'input[name="email"]',
  16 |         passwordSelector: 'input[placeholder="Enter your password"]',
  17 |         secondaryPasswordSelector: 'input[name="password"]',
  18 |         loginButtonSelector: 'button[name="Login"]',
  19 |         clublogo: 'img[alt="logo"][src*="clubLogo"]',
  20 |         contactus: 'button[contains(text(), "Contact us") and contains(@class, "inline-flex") and contains(@class, "bg-lime")]',
  21 |         imgscroller1: 'img[@alt="Unlock Powerful Insights" and contains(@src, "loginsecond") and contains(@class, "object-contain")]',
  22 |         imgscroller2: 'img alt="Unlock Powerful Insights" loading="lazy" width="450" height="300" decoding="async" data-nimg="1" class="object-contain" src="/_next/static/media/loginsecond.b5f50a21.svg" style="color: transparent"',
  23 |         imgscroller3: 'img[@alt="Train & Excel with Expert Guidance" and contains(@src, "loginthird") and contains(@class, "object-contain")]',
  24 |         loginButton: 'button[contains(text(), "Login") and contains(@class, "inline-flex") and contains(@class, "bg-dark-green")]',
  25 |         rememberme: 'div[contains(@class, "relative") and contains(@class, "flex") and contains(@class, "h-5") and contains(@class, "w-5")]/input[@type="checkbox"]',
  26 |         remembermeLabel: 'div[contains(@class, "relative") and contains(@class, "flex") and contains(@class, "h-5") and contains(@class, "w-5")]/input[@type="checkbox"]',
  27 |         togglebutton: 'button[contains(@class, "text-gray-1000") and contains(@class, "flex") and contains(@class, "cursor-pointer") and contains(@class, "px-3")]',
  28 |         clublogodashboard: 'img alt="Large Logo" width="51" height="18" decoding="async" data-nimg="1" class="h-[17px] w-[48px]" src="/_next/static/media/largeLogo.087c4efb.svg" style="color: transparent"',
  29 |     };
  30 |
  31 |     public someAbstractMethod(): void {
  32 |         console.log("Abstract method implemented in ClubSurveyLogin");
  33 |     }
  34 |
  35 |
  36 |     public async ClubSurveyLogin(role: keyof typeof credentials) {
  37 |
  38 |         const { username, password } = credentials[role];
  39 |
  40 |         await this.loadApp(URLConstants.adminURL)
  41 |         const pageTitle = await this.page.title();
  42 |         if (pageTitle.startsWith("59club")) {
  43 |             await this.type(this.selectors.emailSelector, "Username", username);
  44 |             await this.type(this.selectors.passwordSelector, "password", password);
  45 |             await this.click(this.selectors.loginButtonSelector, "Sign In", "Button");
  46 |             await this.wait('mediumWait')
  47 |          //   await this.storeState("./logins/salesforceLogin.json")
  48 |             await this.validateElementVisibility(this.selectors.clublogodashboard, "clubLargeLogo");
  49 |         } else {
  50 |             console.log("Login page is Skipped");
  51 |
  52 |         }
  53 | }
  54 |
  55 | public async verifyLogoRedirection(expectedURL: string) {
  56 |     // Ensure the 59club logo is visible
  57 |     await this.validateElementVisibility(this.selectors.clublogo, "59club Logo");
  58 |
  59 |     // Click the 59club logo
  60 |     await this.click(this.selectors.clublogo, "59club", "Logo");
  61 |
  62 |     // Wait for navigation and verify the URL
  63 |     await this.page.waitForLoadState('domcontentloaded');
  64 |     const currentURL = await this.page.url();
> 65 |     expect(currentURL).toBe(expectedURL);
     |                        ^ Error: expect(received).toBe(expected) // Object.is equality
  66 | }
  67 | /*
  68 | public async verifyHomeLogo() {
  69 |     await this.validateElementVisibility(this.selectors.clublogodashboard, "Home");
  70 |     await this.verifyHomeLogoText();
  71 |     //await this.getInnerText(this.selectors.homeLabel);
  72 |     expect(home).toEqual("Home");
  73 | }*/
  74 |
  75 | }
```