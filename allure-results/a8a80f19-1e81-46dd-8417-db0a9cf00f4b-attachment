# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Role-Based Login Tests @rolebasedlogin >> Group Admin role: Access Group Admin dashboard @rolebasedlogin
- Location: /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Regression_Suite/roleBasedTests.test.ts:25:7

# Error details

```
Error: locator.click: Test timeout of 50000ms exceeded.
Call log:
  - waiting for locator('button[type="submit"][class*="inline-flex"][class*="bg-dark-green"][class*="typography-body-1-bold"]')
    - locator resolved to <button type="submit" class="font-body inline-flex items-center justify-center w-content rounded-sm transition-all active:scale-[0.98] outline-none bg-dark-green text-greyscale-0 typography-body-1-bold hover:bg-dark-green-dark focus:shadow-dark-green focus:bg-dark-green-dark focus:ring focus:ring-offset-2 focus:ring-offset-dark-green focus:ring-lime-shadow focus-visible:ring focus-visible:ring-offset-2 focus-visible:ring-offset-dark-green focus-visible:ring-lime-shadow active:bg-dark-green-2 disabled:â€¦>Login</button>
  - attempting click action
    - waiting for element to be visible, enabled and stable

    at /Users/nehachadha/59club_playwright/playwright-automation-framework/helpers/playwright.ts:91:40
    at ClubSurveyLogin.click (/Users/nehachadha/59club_playwright/playwright-automation-framework/helpers/playwright.ts:89:5)
    at ClubSurveyLogin (/Users/nehachadha/59club_playwright/playwright-automation-framework/src/pages/ClubSurveyLogin.ts:78:7)
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/fixtures/fixture.ts:37:9
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Regression_Suite/roleBasedTests.test.ts:28:18
```

# Page snapshot

```yaml
- alert
- link "logo":
  - img "logo"
- button "Contact us"
- img
- heading "Login" [level=1]
- paragraph: Please enter your details
- text: Email address*
- textbox "Insert your email address": nehaga@yopmail.com
- text: Password*
- button "Forgot your password?"
- textbox "Enter your password": Club59@123
- button:
  - img
- checkbox "Remember me"
- text: Remember me
- button "Login"
```

# Test source

```ts
   1 | import { Page, test, expect, BrowserContext, Locator } from '@playwright/test';
   2 | import * as path from 'path';
   3 | import fs from 'fs';
   4 | import axios from 'axios';
   5 |
   6 | export abstract class PlaywrightWrapper {
   7 |   readonly page: Page;
   8 |   readonly context: BrowserContext;
   9 |   private static newPage: Page | null = null;
   10 |
   11 |   protected getNewPage(): Page {
   12 |     if (!PlaywrightWrapper.newPage) {
   13 |       throw new Error(
   14 |         'New tab is not initialized. Did you forget to call childTab()?'
   15 |       );
   16 |     }
   17 |     return PlaywrightWrapper.newPage;
   18 |   }
   19 |   constructor(page: Page, context: BrowserContext) {
   20 |     this.page = page;
   21 |     this.context = context;
   22 |   }
   23 |   //added concrete subclassthat implements abstract method.
   24 |   abstract someAbstractMethod(): void; // Example abstract method
   25 |
   26 |   /**
   27 |    * Types into the specified textbox after clearing any existing text.
   28 |    *
   29 |    * @param {string} locator - The locator for the textbox element.
   30 |    * @param {string} name - The name of the textbox element.
   31 |    * @param {string} data - The data to be typed into the textbox.
   32 |    */
   33 |   async type(locator: string, name: string, data: string) {
   34 |     await test.step(`Textbox ${name} filled with data: ${data}`, async () => {
   35 |       await this.page.locator(locator).clear();
   36 |       await this.page.locator(locator).fill(data);
   37 |     });
   38 |   }
   39 |
   40 |   /**
   41 |    * Types into the specified textbox, clears existing text, and presses <ENTER>.
   42 |    * @param {string} locator - The locator for the textbox element.
   43 |    * @param {string} name - The name of the textbox element.
   44 |    * @param {string} data - The data to be typed into the textbox.
   45 |    */
   46 |   async fillAndEnter(locator: string, name: string, data: string) {
   47 |     await test.step(`Textbox ${name} filled with data: ${data}`, async () => {
   48 |       await this.page.locator(locator).clear();
   49 |       await this.page.fill(locator, data, { force: true });
   50 |       await this.page.focus(locator);
   51 |       await this.page.keyboard.press('Enter');
   52 |     });
   53 |   }
   54 |
   55 |   /**
   56 |    * Types the specified data into a textbox using keyboard input, after clearing existing text.
   57 |    * @param {string} locator - The locator for the textbox element.
   58 |    * @param {string} data - The data to be typed into the textbox.
   59 |    */
   60 |   async keyboardType(locator: string, data: string) {
   61 |     await test.step(`Textbox filled with data: ${data}`, async () => {
   62 |       await this.page.locator(locator).clear();
   63 |       await this.page.focus(locator);
   64 |       await this.page.keyboard.type(data, { delay: 100 });
   65 |     });
   66 |   }
   67 |
   68 |   /**
   69 |    * Types the specified data into a textbox and presses <Enter> after clearing the existing text.
   70 |    * @param {string} locator - The locator for the textbox element.
   71 |    * @param {string} name - The name of the textbox element.
   72 |    * @param {string} data - The data to be typed into the textbox.
   73 |    */
   74 |   async typeAndEnter(locator: string, name: string, data: string) {
   75 |     await test.step(`Textbox ${name} filled with data: ${data}`, async () => {
   76 |       await this.page.locator(locator).clear();
   77 |       await this.page.keyboard.type(data, { delay: 400 });
   78 |       await this.page.keyboard.press('Enter');
   79 |     });
   80 |   }
   81 |
   82 |   /**
   83 |    * Clicks on the specified textbox element.
   84 |    * @param {string} locator - The locator for the element.
   85 |    * @param {string} name - The name of the element.
   86 |    * @param {string} type - The type of the element
   87 |    */
   88 |   async click(locator: string, name: string, type: string) {
   89 |     await test.step(`The ${name} ${type} clicked`, async () => {
   90 |       await this.page.waitForSelector(locator, { state: 'visible' });
>  91 |       await this.page.locator(locator).click();
      |                                        ^ Error: locator.click: Test timeout of 50000ms exceeded.
   92 |     });
   93 |   }
   94 |
   95 |   async forceClick(locator: string, name: string, type: string) {
   96 |     await test.step(`The ${name} ${type} clicked`, async () => {
   97 |       await this.page.waitForSelector(locator, { state: 'visible' });
   98 |       await this.page.locator(locator).click({ force: true });
   99 |     });
  100 |   }
  101 |
  102 |   async storeState(path: string): Promise<void> {
  103 |     try {
  104 |       await this.context.storageState({ path });
  105 |       console.log(`Storage state saved to: ${path}`);
  106 |     } catch (error) {
  107 |       console.error(`Failed to save storage state to: ${path}`, error);
  108 |     }
  109 |   }
  110 |
  111 |   /**
  112 |    * Loads the specified URL in the browser.
  113 |    *
  114 |    * @param {string} url - The URL to navigate to.
  115 |    */
  116 |   public async loadApp(url: string) {
  117 |     try {
  118 |       await this.page.goto(url); // Increased timeout for 60 seconds
  119 |       console.log(`Successfully loaded the URL: ${url}`);
  120 |     } catch (error) {
  121 |       console.log(`Error loading the page at ${url}:`);
  122 |       throw new Error(`Failed to load the page at ${url}`);
  123 |     }
  124 |   }
  125 |
  126 |   /**
  127 |    * Retrieves the inner text of the specified element.
  128 |    *
  129 |    * @param {string} locator - The locator for the element.
  130 |    * @returns {Promise<string>} - The inner text of the element.
  131 |    */
  132 |   async getInnerText(locator: string): Promise<string> {
  133 |     return await this.page.locator(locator).innerText();
  134 |   }
  135 |
  136 |   /**
  137 |    * Retrieves the text content of the specified element.
  138 |    *
  139 |    * @param {string} locator - The locator for the element.
  140 |    * @returns {Promise<string | null | any>} - The text content of the element, or null if none is found.
  141 |    */
  142 |   async getTextContent(locator: string): Promise<string | null | any> {
  143 |     return await this.page.locator(locator).textContent();
  144 |   }
  145 |
  146 |   /**
  147 |    * Retrieves the input value of the specified element (e.g., from an input field).
  148 |    *
  149 |    * @param {string} locator - The locator for the input element.
  150 |    * @returns {Promise<string>} - The current value of the input element.
  151 |    */
  152 |   async getText(locator: string): Promise<string> {
  153 |     return await this.page.locator(locator).inputValue();
  154 |   }
  155 |
  156 |   /**
  157 |    * Retrieves the title of the current page after it has fully loaded.
  158 |    *
  159 |    * @returns {Promise<string>} - The title of the page.
  160 |    */
  161 |   async getTitle(): Promise<string> {
  162 |     await this.page.waitForLoadState('load');
  163 |     return await this.page.title();
  164 |   }
  165 |
  166 |   /**
  167 |    * Waits for a specific element to be attached to the DOM.
  168 |    *
  169 |    * @param {string} locator - The locator for the element to wait for.
  170 |    * @param {string} name - A descriptive name for the element (not used in this function but could be useful for logging).
  171 |    */
  172 |   async waitSelector(locator: string, name?: string | 'Element') {
  173 |     await test.step(`Waiting for ${name} Visible`, async () => {
  174 |       await this.page.waitForSelector(locator, {
  175 |         timeout: 30000,
  176 |         state: 'attached',
  177 |       });
  178 |     });
  179 |   }
  180 |
  181 |   /**
  182 |    * Fetches the value of a specified attribute from an element.
  183 |    *
  184 |    * @param {string} locator - The locator for the element.
  185 |    * @param {string} attName - The name of the attribute to retrieve.
  186 |    * @returns {Promise<string | null>} - The value of the attribute, or null if the attribute does not exist.
  187 |    */
  188 |   async fetchattribute(locator: string, attName: string) {
  189 |     const eleValue = await this.page.$(locator);
  190 |     return eleValue?.evaluate((node) => node.getAttribute(attName));
  191 |   }
```