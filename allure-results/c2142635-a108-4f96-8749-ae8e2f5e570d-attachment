# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: E2E-CLUB59-31-TC02: Verify Contact Us button opens the Contact Us modal @smoke
- Location: /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:47:9

# Error details

```
Error: page.waitForSelector: Unexpected token "" while parsing css selector "div[class*="cursor-pointer"][class*="bg-greyscale-100"". Did you mean to CSS.escape it?
Call log:
  - waiting for div[class*="cursor-pointer"][class*="bg-greyscale-100" to be visible

    at /Users/nehachadha/59club_playwright/playwright-automation-framework/helpers/playwright.ts:96:29
    at ClubSurveyLogin.click (/Users/nehachadha/59club_playwright/playwright-automation-framework/helpers/playwright.ts:95:20)
    at ClubSurveyLogin.closeContactUsModal (/Users/nehachadha/59club_playwright/playwright-automation-framework/src/pages/ClubSurveyLogin.ts:105:16)
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:71:9
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Smoke/LandOnSurveyPlatform.test.ts:63:9
```

# Page snapshot

```yaml
- dialog "Need help or want to contact us?":
  - button
  - img "Need help or want to contact us?"
  - heading "Need help or want to contact us?" [level=2]
  - img
  - paragraph: Need help or want to contact us?
  - heading "Need help or want to contact us?" [level=2]
  - paragraph: Your identity will be shared with the venue in order to respond to your query, however your survey responses will remain in keeping with your chosen anonymity selection.
  - text: First name*
  - textbox "Your first name"
  - text: Last name*
  - textbox "Your last name"
  - text: Email address*
  - textbox "Enter your email address"
  - text: Message
  - textbox "Message"
  - button "Submit" [disabled]
```

# Test source

```ts
   1 |
   2 | import { Page, test, expect, BrowserContext, Locator } from "@playwright/test";
   3 | import * as path from 'path';
   4 | import fs from 'fs'
   5 | import axios from "axios";
   6 |
   7 |
   8 |
   9 |
   10 | export abstract class PlaywrightWrapper {
   11 |
   12 |     readonly page: Page;
   13 |     readonly context: BrowserContext;
   14 |     private static newPage: Page | null = null;
   15 |
   16 |     protected getNewPage(): Page {
   17 |         if (!PlaywrightWrapper.newPage) {
   18 |             throw new Error('New tab is not initialized. Did you forget to call childTab()?');
   19 |         }
   20 |         return PlaywrightWrapper.newPage;
   21 |     }
   22 |     constructor(page: Page, context: BrowserContext,) {
   23 |         this.page = page;
   24 |         this.context = context;
   25 |     }
   26 |     //added concrete subclassthat implements abstract method.
   27 |     abstract someAbstractMethod(): void; // Example abstract method
   28 |
   29 |     /**
   30 |    * Types into the specified textbox after clearing any existing text.
   31 |    * 
   32 |    * @param {string} locator - The locator for the textbox element.
   33 |    * @param {string} name - The name of the textbox element.
   34 |    * @param {string} data - The data to be typed into the textbox.
   35 |    */
   36 |     async type(locator: string, name: string, data: string) {
   37 |         await test.step(`Textbox ${name} filled with data: ${data}`, async () => {
   38 |             await this.page.locator(locator).clear();
   39 |             await this.page.locator(locator).fill(data);
   40 |         });
   41 |     }
   42 |
   43 |
   44 |
   45 |     /**
   46 |      * Types into the specified textbox, clears existing text, and presses <ENTER>.
   47 |      * @param {string} locator - The locator for the textbox element.
   48 |      * @param {string} name - The name of the textbox element.
   49 |      * @param {string} data - The data to be typed into the textbox.
   50 |      */
   51 |     async fillAndEnter(locator: string, name: string, data: string) {
   52 |         await test.step(`Textbox ${name} filled with data: ${data}`, async () => {
   53 |             await this.page.locator(locator).clear();
   54 |             await this.page.fill(locator, data, { force: true })
   55 |             await this.page.focus(locator)
   56 |             await this.page.keyboard.press("Enter");
   57 |
   58 |         });
   59 |     }
   60 |
   61 |     /**
   62 |     * Types the specified data into a textbox using keyboard input, after clearing existing text.
   63 |     * @param {string} locator - The locator for the textbox element.
   64 |     * @param {string} data - The data to be typed into the textbox.
   65 |   */
   66 |     async keyboardType(locator: string, data: string) {
   67 |         await test.step(`Textbox filled with data: ${data}`, async () => {
   68 |             await this.page.locator(locator).clear();
   69 |             await this.page.focus(locator);
   70 |             await this.page.keyboard.type(data, { delay: 100 });
   71 |         });
   72 |     }
   73 |
   74 |     /**
   75 |     * Types the specified data into a textbox and presses <Enter> after clearing the existing text.
   76 |     * @param {string} locator - The locator for the textbox element.
   77 |     * @param {string} name - The name of the textbox element.
   78 |     * @param {string} data - The data to be typed into the textbox.
   79 |     */
   80 |     async typeAndEnter(locator: string, name: string, data: string) {
   81 |         await test.step(`Textbox ${name} filled with data: ${data}`, async () => {
   82 |             await this.page.locator(locator).clear();
   83 |             await this.page.keyboard.type(data, { delay: 400 });
   84 |             await this.page.keyboard.press("Enter");
   85 |         });
   86 |     }
   87 |
   88 |     /**
   89 |      * Clicks on the specified textbox element.
   90 |      * @param {string} locator - The locator for the element.
   91 |      * @param {string} name - The name of the element.
   92 |      * @param {string} type - The type of the element
   93 |      */
   94 |     async click(locator: string, name: string, type: string) {
   95 |         await test.step(`The ${name} ${type} clicked`, async () => {
>  96 |             await this.page.waitForSelector(locator, { state: 'visible' });
      |                             ^ Error: page.waitForSelector: Unexpected token "" while parsing css selector "div[class*="cursor-pointer"][class*="bg-greyscale-100"". Did you mean to CSS.escape it?
   97 |             await this.page.locator(locator).click();
   98 |         });
   99 |     }
  100 |
  101 |     async forceClick(locator: string, name: string, type: string) {
  102 |         await test.step(`The ${name} ${type} clicked`, async () => {
  103 |             await this.page.waitForSelector(locator, { state: 'visible' });
  104 |             await this.page.locator(locator).click({ force: true });
  105 |         });
  106 |     }
  107 |     
  108 |     async storeState(path: string): Promise<void> {
  109 |         try {
  110 |             await this.context.storageState({ path });
  111 |             console.log(`Storage state saved to: ${path}`);
  112 |         } catch (error) {
  113 |             console.error(`Failed to save storage state to: ${path}`, error);
  114 |         }
  115 |     }
  116 |
  117 |     /**
  118 |     * Loads the specified URL in the browser.
  119 |     * 
  120 |     * @param {string} url - The URL to navigate to.
  121 |     */
  122 |     public async loadApp(url: string) {
  123 |         try {
  124 |             await this.page.goto(url); // Increased timeout for 60 seconds
  125 |             console.log(`Successfully loaded the URL: ${url}`);
  126 |         } catch (error) {
  127 |             console.log(`Error loading the page at ${url}:`);
  128 |             throw new Error(`Failed to load the page at ${url}`);
  129 |         }
  130 |     }
  131 |
  132 |     /**
  133 |     * Retrieves the inner text of the specified element.
  134 |     * 
  135 |     * @param {string} locator - The locator for the element.
  136 |     * @returns {Promise<string>} - The inner text of the element.
  137 |     */
  138 |     async getInnerText(locator: string): Promise<string> {
  139 |         return await this.page.locator(locator).innerText();
  140 |     }
  141 |
  142 |     /**
  143 |     * Retrieves the text content of the specified element.
  144 |     * 
  145 |     * @param {string} locator - The locator for the element.
  146 |     * @returns {Promise<string | null | any>} - The text content of the element, or null if none is found.
  147 |     */
  148 |     async getTextContent(locator: string): Promise<string | null | any> {
  149 |         return await this.page.locator(locator).textContent();
  150 |     }
  151 |
  152 |     /**
  153 |     * Retrieves the input value of the specified element (e.g., from an input field).
  154 |     * 
  155 |     * @param {string} locator - The locator for the input element.
  156 |     * @returns {Promise<string>} - The current value of the input element.
  157 |     */
  158 |     async getText(locator: string): Promise<string> {
  159 |         return await this.page.locator(locator).inputValue();
  160 |     }
  161 |
  162 |     /**
  163 |     * Retrieves the title of the current page after it has fully loaded.
  164 |     * 
  165 |     * @returns {Promise<string>} - The title of the page.
  166 |     */
  167 |     async getTitle(): Promise<string> {
  168 |         await this.page.waitForLoadState('load');
  169 |         return await this.page.title();
  170 |     }
  171 |
  172 |     /**
  173 |     * Waits for a specific element to be attached to the DOM.
  174 |     * 
  175 |     * @param {string} locator - The locator for the element to wait for.
  176 |     * @param {string} name - A descriptive name for the element (not used in this function but could be useful for logging).
  177 |     */
  178 |     async waitSelector(locator: string, name?: string | "Element") {
  179 |         await test.step(`Waiting for ${name} Visible`, async () => {
  180 |             await this.page.waitForSelector(locator, { timeout: 30000, state: "attached" });
  181 |         })
  182 |     }
  183 |
  184 |     /**
  185 |     * Fetches the value of a specified attribute from an element.
  186 |     * 
  187 |     * @param {string} locator - The locator for the element.
  188 |     * @param {string} attName - The name of the attribute to retrieve.
  189 |     * @returns {Promise<string | null>} - The value of the attribute, or null if the attribute does not exist.
  190 |     */
  191 |     async fetchattribute(locator: string, attName: string) {
  192 |         const eleValue = await this.page.$(locator)
  193 |         return eleValue?.evaluate(node => node.getAttribute(attName))
  194 |     }
  195 |
  196 |     /**
```