# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: SANITY-CLUB59-LOGIN-TC01: Navigate to Surveys Platform via 59club Logo @sanity
- Location: /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Regression_Suite/LandOnSurveyPlatform.test.ts:16:5

# Error details

```
Error: expect(received).toContain(expected) // indexOf

Expected substring: "59club"
Received string:    ""
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Regression_Suite/LandOnSurveyPlatform.test.ts:33:31
    at /Users/nehachadha/59club_playwright/playwright-automation-framework/src/tests/Regression_Suite/LandOnSurveyPlatform.test.ts:28:9
```

# Test source

```ts
   1 | import { test, expect } from "@playwright/test";
   2 | import { ClubSurveyLogin } from "../../pages/ClubSurveyLogin";
   3 | import { URLConstants } from "../../../constants/urlConstants";
   4 | import { credentials } from '../../../constants/credentials';
   5 | import { loadEnvironmentConfig } from '../../../config/configLoader';
   6 |
   7 | const environment = loadEnvironmentConfig();
   8 | let clubSurveyLogin: ClubSurveyLogin; 
   9 |
   10 | test.beforeEach(async ({ page, context }) => {
   11 |   // Initialize the ClubSurveyLogin object before each test
   12 |   clubSurveyLogin = new ClubSurveyLogin(page, context);
   13 | });
   14 |
   15 |
   16 | test('SANITY-CLUB59-LOGIN-TC01: Navigate to Surveys Platform via 59club Logo @sanity',  async ({ page, context }) => {
   17 |         // Add test metadata
   18 |         test.info().annotations.push(
   19 |           
   20 |             { type: "TestCase", description: "SANITY-CLUB59-LOGIN-TC01" },
   21 |             { type: "Test Description", description: "Verify clicking the 59club logo redirects to the homepage" }
   22 |         );
   23 |
   24 |         // Initialize the ClubSurveyLogin page object
   25 |        // const clubSurveyLogin = new ClubSurveyLogin(page, context);
   26 |
   27 |         // Step 1: Open the login screen
   28 |         await test.step("Navigate to the login screen", async () => {
   29 |            // await clubSurveyLogin.loadApp(environment.baseURL);
   30 |
   31 |             // Assert that the login screen is loaded
   32 |             const pageTitle = await page.title();
>  33 |             expect(pageTitle).toContain("59club"); 
      |                               ^ Error: expect(received).toContain(expected) // indexOf
   34 |         });
   35 |
   36 |         // Step 2: Verify redirection to the homepage via the 59club logo
   37 |         await test.step("Verify redirection to the homepage via the 59club logo", async () => {
   38 |             await clubSurveyLogin.verifyLogoRedirection(URLConstants.clubURL);
   39 |
   40 |             // Assert that the current URL matches the expected homepage URL
   41 |             const currentURL = await page.url();
   42 |           //  expect(currentURL).toBe(URLConstants.clubURL);
   43 |
   44 |             // Assert that the homepage contains a specific element (e.g., a header or logo)
   45 |             const homepageLogo = page.locator(clubSurveyLogin.selectors.clublogo);
   46 |             await expect(homepageLogo).toBeVisible();
   47 |         });
   48 |     });
   49 |
   50 |
   51 |     test('SANITY-CLUB59-LOGIN-TC02: Verify Contact Us button opens the Contact Us modal @sanity', async ({ page }) => {
   52 |         // Add test metadata
   53 |         test.info().annotations.push(
   54 |             { type: "TestCase", description: "SANITY-CLUB59-LOGIN-TC02" },
   55 |             { type: "Test Description", description: "Verify clicking the Contact Us button opens the Contact Us modal" }
   56 |         );
   57 |         // Step 1: Open the login screen
   58 |         await test.step("Navigate to the login screen", async () => {
   59 |             await clubSurveyLogin.loadApp(environment.baseURL);
   60 |             // Assert that the login screen is loaded
   61 |             const pageTitle = await page.title();
   62 |             expect(pageTitle).toContain("59club"); 
   63 |         });
   64 |        
   65 |         // Step 2: verify Contact us modal is visible by clicking on contact us button.
   66 |         //let contactUsModalAssertText = "Need help or want to contact us?";
   67 |         await test.step("Verify contactus modal via the contact us button", async () => {
   68 |             await clubSurveyLogin.verifyContactUsModal(clubSurveyLogin.selectors.contactUsModalAssert.toString());
   69 |
   70 |         // Step 2: Assert that the "Contact Us" modal is visible
   71 |         const contactUsModal = page.locator(clubSurveyLogin.selectors.contactUsModal); // Locator for the modal heading
   72 |         await expect(page.locator(clubSurveyLogin.selectors.contactUsModalAssert)).toContainText("Need help"); // Assert that the modal is visible
   73 |       });
   74 |     });
   75 |     
   76 |
   77 |
   78 | test('SANITY-CLUB59-LOGIN-TC03:Validate login form is accessible--@sanity', async ({ page }) => {
   79 |     // Add test metadata
   80 |     test.info().annotations.push(
   81 |         { type: 'TestCase', description: 'SANITY-CLUB59-LOGIN-TC03' },
   82 |         { type: 'Test Description', description: 'Validate login form is accessible' }
   83 |     );
   84 |     // Step 1: Open the login screen
   85 |     await test.step("Navigate to the login screen", async () => {
   86 |         await clubSurveyLogin.loadApp(environment.baseURL);
   87 |         // Assert that the login screen is loaded
   88 |         const pageTitle = await page.title();
   89 |         expect(pageTitle).toContain("59club"); 
   90 |     });
   91 |
   92 |     // Step 2: Verify the username, password and Login button is accessible
   93 |     await test.step("Verify login form elements are accessible", async () => {
   94 |         const usernameField = page.locator(clubSurveyLogin.selectors.emailSelector);
   95 |         const passwordField = page.locator(clubSurveyLogin.selectors.passwordSelector);
   96 |         const loginButton = page.locator(clubSurveyLogin.selectors.loginButtonSelector);
   97 |
   98 |         // Assert that the username field is visible
   99 |         await expect(usernameField).toBeVisible();
  100 |
  101 |         // Assert that the password field is visible
  102 |         await expect(passwordField).toBeVisible();
  103 |
  104 |         // Assert that the login button is visible
  105 |         await expect(loginButton).toBeVisible();
  106 |     });
  107 |     // Step 3: Verify the "Remember Me" checkbox is accessible
  108 |     await test.step("Verify 'Remember Me' checkbox is accessible", async () => {
  109 |         const rememberMeCheckbox = page.locator(clubSurveyLogin.selectors.rememberme);
  110 |         await expect(rememberMeCheckbox).toBeVisible();
  111 |     }
  112 |     );
  113 |     // Step 4: Verify the "Forgot Password" link is accessible
  114 |     await test.step("Verify 'Forgot Password' link is accessible", async () => {
  115 |         const forgotPasswordLink = page.locator(clubSurveyLogin.selectors.forgotpassword);
  116 |         await expect(forgotPasswordLink).toBeVisible();
  117 |     });
  118 | });
  119 |
  120 |
  121 | test('E2E-CLUB59-LOGIN-001: Complete end-to-end flow @e2e', async ({ page }) => {
  122 |   // Add test metadata
  123 |   test.info().annotations.push(
  124 |     { type: "TestCase", description: "E2E-CLUB59-LOGIN" },
  125 |     { type: "Test Description", description: "End-to-end flow: Load page, navigate via logo and Contact Us, and verify login fields visibility" }
  126 |   );
  127 |
  128 |   // Step 1: Load the login screen
  129 |   await test.step("Navigate to the login screen", async () => {
  130 |     await clubSurveyLogin.loadApp(environment.baseURL);
  131 |
  132 |     // Assert that the login screen is loaded
  133 |     const pageTitle = await page.title();
```